---
#This will create this metric in all the tiers, under this path. Please make sure to have a trailing |
#metricPrefix: "Custom Metrics|AWS Kinesis Analytics|"

#This will create it in specific Tier aka Component. Replace <COMPONENT_ID>. Please make sure to have a trailing |.
#To find out the COMPONENT_ID, please see the screen shot here https://docs.appdynamics.com/display/PRO42/Build+a+Monitoring+Extension+Using+Java

# Metric list can be found here : https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aka-metricscollected.html

metricPrefix: "Server|Component:<TIER_ID>|Custom Metrics|AWS Kinesis Analytics|"

accounts:
  - awsAccessKey: ""
    awsSecretKey: ""
    displayAccountName: ""
    # Regions where cloudwatch is registered
    # Allowed values: us-east-1, us-west-2, eu-west-1, eu-central-1
    regions: ["us-west-2"]

credentialsDecryptionConfig:
  enableDecryption: "false"
  encryptionKey:

proxyConfig:
  host:
  port:
  username:
  password:

dimensions:
  - name: "Flow"
    displayName: "Flow"
    values: [".*"]
  - name: "Id"
    displayName: "Id"
    values: [".*"]
  - name: "Application"
    displayName: "Application"
    values: [".*"]

concurrencyConfig:
  noOfAccountThreads: 3
  noOfRegionThreadsPerAccount: 3
  noOfMetricThreadsPerRegion: 3
  #Thread timeout in seconds
  threadTimeOut: 30

# Allowed values are Basic and Detailed. Refer https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch-new.html for more information
# Basic will fire CloudWatch API calls every 5 minutes
# Detailed will fire CloudWatch API calls every 1 minutes
cloudWatchMonitoring: "Basic"
# If you want to run the extension with a further delay, comment the "cloudWatchMonitoring" above and use the following field
# which takes in the number of minutes after which the extension should call the cloudwatch metrics
#cloudWatchMonitoringInterval: 10

regionEndPoints:
  us-east-1 : monitoring.us-east-1.amazonaws.com
  us-east-2 : monitoring.us-east-2.amazonaws.com
  us-west-1 : monitoring.us-west-1.amazonaws.com
  us-west-2 : monitoring.us-west-2.amazonaws.com
  ap-northeast-1 : monitoring.ap-northeast-1.amazonaws.com
  ap-northeast-2: monitoring.ap-northeast-2.amazonaws.com
  ap-northeast-3 : monitoring.ap-northeast-3.amazonaws.com
  ap-south-1 : monitoring.ap-south-1.amazonaws.com
  ap-southeast-1 : monitoring.ap-southeast-1.amazonaws.com
  ap-southeast-2 : monitoring.ap-southeast-2.amazonaws.com
  ca-central-1 : monitoring.ca-central-1.amazonaws.com
  cn-north-1 : monitoring.cn-north-1.amazonaws.com.cn
  cn-northwest-1 : monitoring.cn-northwest-1.amazonaws.com.cn
  eu-central-1 : monitoring.eu-central-1.amazonaws.com
  eu-west-1 : monitoring.eu-west-1.amazonaws.com
  eu-west-2 : monitoring.eu-west-2.amazonaws.com
  eu-west-3 : monitoring.eu-west-3.amazonaws.com
  sa-east-1 : monitoring.sa-east-1.amazonaws.com
  us-gov-west-1 : monitoring.us-gov-west-1.amazonaws.com

# Global metrics config for all accounts
metricsConfig:
    # By default, all metrics retrieved from cloudwatch are 'Average' values.
    # This option allows you to override the metric type.
    #
    # Allowed statTypes are: ave, max, min, sum, samplecount
    #
    # Note: Irrespective of the metric type, value will still be reported as
    # Observed value to the Controller
    #TODO alias check
    includeMetrics:
       - name: "Bytes"
         alias: "Bytes per minute (Unit - byte; StatType - sum)"
         statType: "sum"
         aggregationType: "AVERAGE"
         timeRollUpType: "AVERAGE"
         clusterRollUpType: "INDIVIDUAL"
         delta: false
         multiplier: 1
       - name: "KPUs"
         alias: "Kinesis Processing Units (Unit - count; StatType - ave)"
         statType: "ave"
         aggregationType: "AVERAGE"
         timeRollUpType: "AVERAGE"
         clusterRollUpType: "INDIVIDUAL"
         delta: false
         multiplier: 1
       - name: "MillisBehindLatest"
         alias: "Millis Behind Latest (Unit - ms; StatType - max)"
         statType: "max"
         aggregationType: "AVERAGE"
         timeRollUpType: "AVERAGE"
         clusterRollUpType: "INDIVIDUAL"
         delta: false
         multiplier: 1
       - name: "Records"
         alias: "Records (Unit - count; StatType - sum)"
         statType: "sum"
         aggregationType: "AVERAGE"
         timeRollUpType: "AVERAGE"
         clusterRollUpType: "INDIVIDUAL"
         delta: false
         multiplier: 1
       - name: "Success"
         alias: "Success (StatType - ave)"
         statType: "ave"
         aggregationType: "AVERAGE"
         timeRollUpType: "AVERAGE"
         clusterRollUpType: "INDIVIDUAL"
         delta: false
         multiplier: 1
       - name: "InputProcessing.Duration"
         alias: "InputProcessing Duration (Unit- ms;StatType- ave) "
         statType: "ave"
         aggregationType: "AVERAGE"
         timeRollUpType: "AVERAGE"
         clusterRollUpType: "INDIVIDUAL"
         delta: false
         multiplier: 1
       - name: "InputProcessing.OkRecords"
         alias: "InputProcessing OkRecords (Unit - count; StatType - sum)"
         statType: "sum"
         aggregationType: "AVERAGE"
         timeRollUpType: "AVERAGE"
         clusterRollUpType: "INDIVIDUAL"
         delta: false
         multiplier: 1
       - name: "InputProcessing.OkBytes"
         alias: "InputProcessing OkBytes (Unit - byte; StatType - sum)"
         statType: "sum"
         aggregationType: "AVERAGE"
         timeRollUpType: "AVERAGE"
         clusterRollUpType: "INDIVIDUAL"
         delta: false
         multiplier: 1
       - name: "InputProcessing.DroppedRecords"
         alias: "InputProcessing DroppedRecords (Unit - count; StatType - sum)"
         statType: "sum"
         aggregationType: "AVERAGE"
         timeRollUpType: "AVERAGE"
         clusterRollUpType: "INDIVIDUAL"
         delta: false
         multiplier: 1
       - name: "InputProcessing.ProcessingFailedRecords"
         alias: "InputProcessing ProcessingFailedRecords (Unit - count; StatType - sum)"
         statType: "sum"
         aggregationType: "AVERAGE"
         timeRollUpType: "AVERAGE"
         clusterRollUpType: "INDIVIDUAL"
         delta: false
         multiplier: 1
       - name: "InputProcessing.Success"
         alias: "InputProcessing Success (StatType - ave)"
         statType: "ave"
         aggregationType: "AVERAGE"
         timeRollUpType: "AVERAGE"
         clusterRollUpType: "INDIVIDUAL"
         delta: false
         multiplier: 1
       - name: "LambdaDelivery.OkRecords"
         alias: "LambdaDelivery OkRecords (Unit - count; StatType - sum)"
         statType: "ave"
         aggregationType: "AVERAGE"
         timeRollUpType: "AVERAGE"
         clusterRollUpType: "INDIVIDUAL"
         delta: false
         multiplier: 1
       - name: "LambdaDelivery.DeliveryFailedRecords"
         alias: "LambdaDelivery DeliveryFailedRecords (Unit - count; StatType - sum)"
         statType: "ave"
         aggregationType: "AVERAGE"
         timeRollUpType: "AVERAGE"
         clusterRollUpType: "INDIVIDUAL"
         delta: false
         multiplier: 1
       - name: "LambdaDelivery.Duration"
         alias: "LambdaDelivery.Duration (Unit - ms; StatType - ave)"
         statType: "ave"
         aggregationType: "AVERAGE"
         timeRollUpType: "AVERAGE"
         clusterRollUpType: "INDIVIDUAL"
         delta: false
         multiplier: 1

    metricsTimeRange:
      startTimeInMinsBeforeNow: 5
      endTimeInMinsBeforeNow: 0

    # Rate limit ( per second ) for GetMetricStatistics, default value is 400. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_limits.html
    getMetricStatisticsRateLimit: 400

    #
    # The max number of retry attempts for failed retryable requests
    # (ex: 5xx error responses from a service) or throttling errors
    #
    maxErrorRetrySize: 0
...
